"use client"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Send, Paperclip, HelpCircle, User, CheckCheck, Clock } from "lucide-react"

interface Message {
  id: string
  text: string
  sender: "user" | "support" | "bot"
  timestamp: Date
  status?: "sent" | "delivered" | "read"
  attachments?: { name: string; size: string; type: string }[]
  isFAQ?: boolean
  faqOptions?: { id: string; question: string; answer: string }[]
}

const faqData = [
  {
    id: "1",
    question: "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è —Å—Ç–∞–Ω–∫–∞?",
    answer:
      "–î–ª—è –∑–∞–∫–∞–∑–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ó–∞–∫–∞–∑—ã' ‚Üí '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞. –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å —Å—Ç–∞–Ω–∫–∞ –∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä.",
  },
  {
    id: "2",
    question: "–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ?",
    answer:
      "–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 24 –º–µ—Å—è—Ü–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –≤–≤–æ–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é. –í —Ç–µ—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤—Å–µ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.",
  },
  {
    id: "3",
    question: "–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ?",
    answer:
      "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (495) 123-45-67. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¢–û –∑–∞—Ä–∞–Ω–µ–µ.",
  },
]

export default function ChatPage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "welcome",
      text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üëã\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–æ–µ–¥–∏–Ω—é —Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
      sender: "bot",
      timestamp: new Date(),
      isFAQ: true,
      faqOptions: faqData,
    },
  ])
  const [newMessage, setNewMessage] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const [operatorConnected, setOperatorConnected] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  // –°–∫—Ä–æ–ª–ª —Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
  useEffect(() => {
    if (messages.length > 1 && messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth", block: "end" });
    }
  }, [messages])

  const handleSendMessage = () => {
    if (!newMessage.trim()) return
    const message: Message = {
      id: Date.now().toString(),
      text: newMessage,
      sender: "user",
      timestamp: new Date(),
      status: "sent",
    }
    setMessages((prev) => [...prev, message])
    setNewMessage("")
    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if (operatorConnected) {
      setTimeout(() => {
        setIsTyping(true)
        setTimeout(() => {
          setIsTyping(false)
          setMessages((prev) => [
            ...prev,
            {
              id: (Date.now() + 1).toString(),
              text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
              sender: "support",
              timestamp: new Date(),
            },
          ])
        }, 1500)
      }, 800)
    }
  }

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const handleFAQClick = (faq: typeof faqData[0]) => {
    setMessages((prev) => [
      ...prev,
      {
        id: Date.now().toString(),
        text: faq.question,
        sender: "user",
        timestamp: new Date(),
        status: "read",
      },
    ])
    setTimeout(() => {
      setMessages((prev) => [
        ...prev,
        {
          id: (Date.now() + 1).toString(),
          text: faq.answer +
            "\n\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å –∏–∑ FAQ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'.",
          sender: "bot",
          timestamp: new Date(),
          isFAQ: true,
          faqOptions: faqData,
        },
      ])
    }, 1000)
  }

  const handleConnectOperator = () => {
    setMessages((prev) => [
      ...prev,
      {
        id: Date.now().toString(),
        text: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
        sender: "user",
        timestamp: new Date(),
        status: "read",
      },
    ])
    setTimeout(() => {
      setIsTyping(true)
      setTimeout(() => {
        setIsTyping(false)
        setOperatorConnected(true)
        setMessages((prev) => [
          ...prev,
          {
            id: (Date.now() + 1).toString(),
            text: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, —è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            sender: "support",
            timestamp: new Date(),
          },
        ])
      }, 1200)
    }, 500)
  }

  const formatTime = (date: Date) =>
    date.toLocaleTimeString("ru-RU", { hour: "2-digit", minute: "2-digit" })

  return (
    <div className="flex flex-col h-full min-h-0 bg-gray-50 text-[15px]">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 px-2 py-2 flex-shrink-0 shadow-sm sticky top-0 z-10">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-lg sm:text-xl font-bold text-gray-900">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</h1>
            <p className="text-[11px] sm:text-xs text-gray-600 mt-0.5">
              {operatorConnected ? (
                <span className="flex items-center gap-2">
                  <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                  –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
                </span>
              ) : (
                <span className="flex items-center gap-2">
                  <span className="w-2 h-2 bg-yellow-500 rounded-full"></span>
                  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫
                </span>
              )}
            </p>
          </div>
        </div>
      </header>

      {/* Messages */}
      <main className="flex-1 flex flex-col min-h-0">
        <div className="flex-1 overflow-y-auto px-1 sm:px-3 py-2 space-y-2 min-h-0" style={{ background: "#f8fafc" }}>
          {messages.map((message, idx) => {
            const showDate = idx === 0 ||
              messages[idx].timestamp.toDateString() !== messages[idx - 1].timestamp.toDateString()
            return (
              <div key={message.id}>
                {showDate && (
                  <div className="flex justify-center mb-2">
                    <span className="bg-gray-100 text-gray-600 text-xs px-3 py-1 rounded-full">
                      {message.timestamp.toLocaleDateString("ru-RU", { day: "numeric", month: "long" })}
                    </span>
                  </div>
                )}
                <div className={`flex gap-3 ${message.sender === "user" ? "justify-end" : "justify-start"}`}>
                  {(message.sender === "support" || message.sender === "bot") && (
                    <Avatar className="w-8 h-8 flex-shrink-0">
                      <AvatarFallback className={message.sender === "bot" ? "bg-yellow-100 text-yellow-700" : "bg-red-100 text-red-700"}>
                        {message.sender === "bot" ? "ü§ñ" : "–ê–ù"}
                      </AvatarFallback>
                    </Avatar>
                  )}
                  <div className={`max-w-xs sm:max-w-md ${message.sender === "user" ? "order-2" : ""}`}>
                    <div className={`rounded-xl px-3 py-2 text-xs shadow-sm ${
                      message.sender === "user"
                        ? "bg-red-600 text-white"
                        : message.sender === "bot"
                          ? "bg-yellow-50 border border-yellow-200 text-gray-900"
                          : "bg-white border border-gray-200 text-gray-900"
                    }`}>
                      <p className="whitespace-pre-wrap">{message.text}</p>
                      {/* FAQ */}
                      {message.isFAQ && message.faqOptions && (
                        <div className="mt-4 space-y-2">
                          <p className="text-xs font-medium text-gray-700 mb-2">–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</p>
                          <div className="grid gap-2">
                            {message.faqOptions.map((faq) => (
                              <Button
                                key={faq.id}
                                variant="outline"
                                size="sm"
                                className="justify-start text-left h-auto p-3 bg-white hover:bg-gray-50 border-gray-200 text-gray-900"
                                onClick={() => handleFAQClick(faq)}
                              >
                                <HelpCircle className="w-4 h-4 mr-2 flex-shrink-0 text-red-600" />
                                <span className="text-sm">{faq.question}</span>
                              </Button>
                            ))}
                            <Button
                              variant="default"
                              size="sm"
                              className="justify-start mt-3 bg-red-600 hover:bg-red-700 text-white font-medium"
                              onClick={handleConnectOperator}
                            >
                              <User className="w-4 h-4 mr-2" />
                              –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
                            </Button>
                          </div>
                        </div>
                      )}
                    </div>
                    <div className={`flex items-center gap-1 mt-0.5 text-[11px] text-gray-500 ${message.sender === "user" ? "justify-end" : "justify-start"}`}>
                      <span>{formatTime(message.timestamp)}</span>
                      {message.sender === "user" && message.status && (
                        <div className="flex items-center">
                          {message.status === "sent" && <Clock className="w-3 h-3 ml-1" />}
                          {message.status === "delivered" && <CheckCheck className="w-3 h-3 ml-1" />}
                          {message.status === "read" && <CheckCheck className="w-3 h-3 ml-1 text-red-500" />}
                        </div>
                      )}
                    </div>
                  </div>
                  {message.sender === "user" && (
                    <Avatar className="w-8 h-8 flex-shrink-0">
                      <AvatarFallback className="bg-gray-100 text-gray-600">–í–´</AvatarFallback>
                    </Avatar>
                  )}
                </div>
              </div>
            )
          })}
          {isTyping && (
            <div className="flex gap-3 justify-start">
              <Avatar className="w-8 h-8 flex-shrink-0">
                <AvatarFallback className="bg-red-100 text-red-700">–ê–ù</AvatarFallback>
              </Avatar>
              <div className="bg-white border border-gray-200 rounded-2xl px-4 py-3 shadow-sm">
                <div className="flex gap-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: "0.1s" }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>
        {/* Input */}
        <form
          className="bg-white border-t border-gray-200 px-2 py-2 flex items-end gap-2 shadow-sm sticky bottom-0 z-10 w-full"
          onSubmit={e => {
            e.preventDefault();
            handleSendMessage();
          }}
          autoComplete="off"
        >
          <div className="flex-1">
            <div className="flex items-center gap-1 bg-gray-50 rounded-xl px-2 py-2 border border-gray-200 focus-within:border-red-500 focus-within:ring-1 focus-within:ring-red-500">
              <Input
                value={newMessage}
                onChange={e => setNewMessage(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder={operatorConnected ? "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." : "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π..."}
                className="border-0 bg-transparent p-0 focus-visible:ring-0 focus-visible:ring-offset-0 text-gray-900 placeholder:text-gray-500"
                autoComplete="off"
              />
              <Button
                type="button"
                variant="ghost"
                size="icon"
                className="h-7 w-7 p-0 hover:bg-gray-100"
                onClick={() => fileInputRef.current?.click()}
                tabIndex={-1}
              >
                <Paperclip className="w-4 h-4 text-gray-500" />
              </Button>
            </div>
          </div>
          <Button
            type="submit"
            disabled={!newMessage.trim()}
            className="h-9 w-9 rounded-full p-0 bg-red-600 hover:bg-red-700 text-white"
          >
            <Send className="w-4 h-4" />
          </Button>
          <input ref={fileInputRef} type="file" className="hidden" multiple accept="image/*,.pdf,.doc,.docx" />
        </form>
      </main>
    </div>
  )
}
